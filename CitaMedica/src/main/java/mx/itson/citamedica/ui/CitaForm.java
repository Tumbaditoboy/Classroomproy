/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package mx.itson.citamedica.ui;

import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import mx.itson.citamedica.entities.Cita;
import mx.itson.citamedica.entities.Especialidad;
import mx.itson.citamedica.entities.Medico;
import mx.itson.citamedica.entities.Paciente;
import mx.itson.citamedica.persistence.CitaDAO;
import mx.itson.citamedica.persistence.EspecialidadDAO;
import mx.itson.citamedica.persistence.Medico_especialidadDAO;
import mx.itson.citamedica.persistence.PacienteDAO;

/**
 *
 * @author Akane
 */
public class CitaForm extends javax.swing.JDialog {

    /**
     * Creates new form CitaForm
     */
    public CitaForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
    cmbPaciente.setModel(new javax.swing.DefaultComboBoxModel());

    
    // Llenar los JComboBox con cadenas en formato "ID - Texto"
    try {
        List pacientes = PacienteDAO.getAll();
        cmbPaciente.removeAllItems();
        for (int i = 0; i < pacientes.size(); i++) {
            Paciente paciente = (Paciente) pacientes.get(i);
            // Agregamos el String con ID y título, por ejemplo: "1 - Matemáticas"
            cmbPaciente.addItem(paciente.getId() + " - " + paciente.getNombre());
        }

        List especialidades = EspecialidadDAO.getAll();
        cmbEspecialidad.removeAllItems();
        for (int i = 0; i < especialidades.size(); i++) {
            Especialidad especialidad = (Especialidad) especialidades.get(i);
            // Agregamos el String con ID y nombre
            cmbEspecialidad.addItem(especialidad);
        }
        
        
        cmbEspecialidad.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        Especialidad especialidadSeleccionada = (Especialidad) cmbEspecialidad.getSelectedItem();
        if (especialidadSeleccionada != null) {
            List<Medico> medicos = Medico_especialidadDAO.obtenerMedicosPorEspecialidad(especialidadSeleccionada.getId());
            DefaultComboBoxModel<Medico> modeloMedico = new DefaultComboBoxModel<>();
            for (Medico m : medicos) {
                modeloMedico.addElement(m);
            }
            cmbMedico.setModel(modeloMedico);
        }
    }
});
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jSpinner1 = new javax.swing.JSpinner();
        cmbPaciente = new javax.swing.JComboBox<>();
        cmbMedico = new javax.swing.JComboBox<>();
        cmbEspecialidad = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        spinnerHora = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmbPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPacienteActionPerformed(evt);
            }
        });

        cmbEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEspecialidadActionPerformed(evt);
            }
        });

        jLabel1.setText("Paciente:");

        jLabel2.setText("Medico:");

        jLabel3.setText("Especialidad:");

        jLabel4.setText("Fecha:");

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        spinnerHora.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY));
        spinnerHora.setEditor(new javax.swing.JSpinner.DateEditor(spinnerHora, "hh:mm a"));

        jLabel5.setText("Hora:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(255, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAceptar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(cmbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(66, 66, 66))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(cmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(86, 86, 86)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAceptar))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spinnerHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
    try {
        // Obtener paciente
        String pacienteSeleccionado = (String) cmbPaciente.getSelectedItem();
        if (pacienteSeleccionado == null || pacienteSeleccionado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona un paciente.");
            return;
        }
        int idPaciente = Integer.parseInt(pacienteSeleccionado.split("-")[0].trim());
        Paciente paciente = PacienteDAO.getById(idPaciente);

        // Obtener médico
        Medico medico = (Medico) cmbMedico.getSelectedItem();
        if (medico == null) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona un médico.");
            return;
        }

        // Obtener especialidad
        Especialidad especialidad = (Especialidad) cmbEspecialidad.getSelectedItem();
        if (especialidad == null) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona una especialidad.");
            return;
        }

        // Obtener fecha
        java.util.Date fechaSeleccionada = jDateChooser2.getDate();
        if (fechaSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona una fecha.");
            return;
        }

        // Obtener hora del JSpinner
        java.util.Date horaSeleccionada = (java.util.Date) spinnerHora.getValue(); 

        // Combinar fecha y hora
        Calendar fechaCalendar = Calendar.getInstance();
        fechaCalendar.setTime(fechaSeleccionada);

        Calendar horaCalendar = Calendar.getInstance();
        horaCalendar.setTime(horaSeleccionada);

        fechaCalendar.set(Calendar.HOUR_OF_DAY, horaCalendar.get(Calendar.HOUR_OF_DAY));
        fechaCalendar.set(Calendar.MINUTE, horaCalendar.get(Calendar.MINUTE));
        fechaCalendar.set(Calendar.SECOND, 0);
        fechaCalendar.set(Calendar.MILLISECOND, 0);

        java.util.Date fechaFinal = fechaCalendar.getTime(); // La fecha y hora combinadas

        // Verificar que no haya una cita en la misma fecha y hora
        List<Cita> citasExistentes = CitaDAO.getAll();
        boolean existeCita = false;

        for (Cita cita : citasExistentes) {
            if (cita.getFecha().compareTo(fechaFinal) == 0) {
                existeCita = true;
                break;
            }
        }

        if (existeCita) {
            JOptionPane.showMessageDialog(this, "Ya existe una cita agendada en esa fecha y hora.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Crear nueva cita
        Cita nuevaCita = new Cita();
        nuevaCita.setPaciente(paciente);
        nuevaCita.setMedico(medico);
        nuevaCita.setEspecialidad(especialidad); 
        nuevaCita.setFecha(fechaFinal);

        // Guardar cita
        boolean resultado = CitaDAO.save(nuevaCita);

        if (resultado) {
            JOptionPane.showMessageDialog(this, "¡Cita agendada con éxito!");
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Error al agendar la cita.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void cmbEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEspecialidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbEspecialidadActionPerformed

    private void cmbPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPacienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CitaForm dialog = new CitaForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JComboBox<Especialidad> cmbEspecialidad;
    private javax.swing.JComboBox<Medico> cmbMedico;
    private javax.swing.JComboBox<String> cmbPaciente;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner spinnerHora;
    // End of variables declaration//GEN-END:variables
}
